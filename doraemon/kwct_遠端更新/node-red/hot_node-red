[
    {
        "id": "b3283acf.bcb898",
        "type": "tab",
        "label": "heat_processing_utilization",
        "disabled": false,
        "info": ""
    },
    {
        "id": "4d33a3f7.9a95cc",
        "type": "tab",
        "label": "heat_processing_2_utilization",
        "disabled": false,
        "info": ""
    },
    {
        "id": "1107d799.228b98",
        "type": "influxdb",
        "z": "b3283acf.bcb898",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "reading",
        "name": "",
        "usetls": false,
        "tls": ""
    },
    {
        "id": "e2e13306.d1f9a",
        "type": "mqtt-broker",
        "z": "b3283acf.bcb898",
        "name": "",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "compatmode": true,
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "willTopic": "",
        "willQos": "0",
        "willPayload": ""
    },
    {
        "id": "e5e7a933.556b18",
        "type": "influxdb",
        "z": "4d33a3f7.9a95cc",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "reading",
        "name": "",
        "usetls": false,
        "tls": ""
    },
    {
        "id": "628fd767.22ae28",
        "type": "mqtt-broker",
        "z": "4d33a3f7.9a95cc",
        "name": "",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "compatmode": true,
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "willTopic": "",
        "willQos": "0",
        "willPayload": ""
    },
    {
        "id": "b91e40fd.a7f79",
        "type": "inject",
        "z": "b3283acf.bcb898",
        "name": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "3",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "x": 190,
        "y": 280,
        "wires": [
            [
                "92ba8592.f427e8"
            ]
        ]
    },
    {
        "id": "92ba8592.f427e8",
        "type": "function",
        "z": "b3283acf.bcb898",
        "name": "query",
        "func": "var local_time_zone = 8\n\n// get local time\nvar local = new Date()\nlocal.setHours(local.getHours() + local_time_zone)\n\n// determine local since and until\nvar local_since = new Date(\n    local.getFullYear(),\n    local.getMonth(),\n    local.getDate(),\n    0,\n    0,\n    0)\n\nvar local_until = new Date(local_since)\nlocal_until.setDate(local_until.getDate() + 1)\n\n// convert to utc\nvar since = _to_utc_time(local_since).toISOString()\nvar until = _to_utc_time(local_until).toISOString()\n\nmsg.query = `\n    SELECT \"PRO-COM-RUN\"\n    FROM Q00\n    WHERE \"PRO-COM-RUN\" = 1\n    AND time >= '${since}'\n    AND time < '${until}'\n`\n\nnode.log(msg.query)\n\nreturn msg;\n\n\nfunction _to_utc_time(local_time)\n{\n    var utc_time = new Date(local_time)\n    utc_time.setHours(utc_time.getHours() - local_time_zone)\n\n    return utc_time\n}\n",
        "outputs": 1,
        "noerr": 0,
        "x": 390,
        "y": 280,
        "wires": [
            [
                "98678e7f.ff0b4"
            ]
        ]
    },
    {
        "id": "98678e7f.ff0b4",
        "type": "influxdb in",
        "z": "b3283acf.bcb898",
        "influxdb": "1107d799.228b98",
        "name": "",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "x": 410,
        "y": 440,
        "wires": [
            [
                "fb3d65ee.e00ac8"
            ]
        ]
    },
    {
        "id": "fb3d65ee.e00ac8",
        "type": "function",
        "z": "b3283acf.bcb898",
        "name": "utilization",
        "func": "var LEAD_TIME_SECONDS = 900\nvar PRODUCTION_TIME_SECONDS = 900\n\n// create timestamp and sort\nvar timestamp_list = []\nvar tag = 1\nmsg.payload.forEach(\n    function(item)\n    {\n        timestamp_list.push(\n            {\n                tag: tag,\n                time: _convert_to_seconds(Date.parse(item.time)) - LEAD_TIME_SECONDS\n            },\n            {\n                tag: tag,\n                time: _convert_to_seconds(Date.parse(item.time)) + PRODUCTION_TIME_SECONDS\n            });\n\n        ++tag\n    }\n)\n\ntimestamp_list.sort(\n    function(a, b)\n    {\n        return a.time - b.time\n    }\n)\n\n// calculate utilization\nvar queue_ = []\nvar start_time = 0\nvar end_time = 0\nvar today_utilization_seconds = 0\n\ntimestamp_list.forEach(\n    function(item)\n    {\n        if (queue_.length == 0)\n        {\n            start_time = item.time\n            queue_.push(item)\n        }\n        else if (queue_[0].tag == item.tag)\n        {\n            end_time = item.time\n            queue_.shift()\n        }\n        else\n        {\n            queue_.push(item)\n        }\n\n        if (queue_.length == 0)\n        {\n            today_utilization_seconds += end_time - start_time\n        }\n    }\n)\n\nnode.log(today_utilization_seconds / 3600)\n\nmsg.payload = {\n    \"deviceId\": \"Q00_utilization\",\n    \"channels\":[\n        {\n            \"channelId\": \"total_utilization_hours\",\n            \"value\":{\n                \"num\": Math.floor(today_utilization_seconds / 3600 * 100) / 100\n            }\n        }\n    ]\n}\n\nreturn msg\n\n\n// function\nfunction _convert_to_seconds(epoch_milliseconds)\n{\n    return Math.floor(epoch_milliseconds / 1000)\n}\n",
        "outputs": 1,
        "noerr": 0,
        "x": 620,
        "y": 440,
        "wires": [
            [
                "b508c15e.7d022"
            ]
        ]
    },
    {
        "id": "b508c15e.7d022",
        "type": "mqtt out",
        "z": "b3283acf.bcb898",
        "name": "",
        "topic": "/in/devices/Q00_utilization/readings",
        "qos": "1",
        "retain": "",
        "broker": "e2e13306.d1f9a",
        "x": 460,
        "y": 580,
        "wires": []
    },
    {
        "id": "398e0fb.35794f",
        "type": "inject",
        "z": "4d33a3f7.9a95cc",
        "name": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "3",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "x": 190,
        "y": 280,
        "wires": [
            [
                "2a1b92fa.0458ae"
            ]
        ]
    },
    {
        "id": "2a1b92fa.0458ae",
        "type": "function",
        "z": "4d33a3f7.9a95cc",
        "name": "query",
        "func": "var local_time_zone = 8\n\n// get local time\nvar local = new Date()\nlocal.setHours(local.getHours() + local_time_zone)\n\n// determine local since and until\nvar local_since = new Date(\n    local.getFullYear(),\n    local.getMonth(),\n    local.getDate(),\n    0,\n    0,\n    0)\n\nvar local_until = new Date(local_since)\nlocal_until.setDate(local_until.getDate() + 1)\n\n// convert to utc\nvar since = _to_utc_time(local_since).toISOString()\nvar until = _to_utc_time(local_until).toISOString()\n\nmsg.query = `\n    SELECT \"PRO-COM-RUN\"\n    FROM Q00U\n    WHERE \"PRO-COM-RUN\" = 1\n    AND time >= '${since}'\n    AND time < '${until}'\n`\n\nnode.log(msg.query)\n\nreturn msg;\n\n\nfunction _to_utc_time(local_time)\n{\n    var utc_time = new Date(local_time)\n    utc_time.setHours(utc_time.getHours() - local_time_zone)\n\n    return utc_time\n}\n",
        "outputs": 1,
        "noerr": 0,
        "x": 390,
        "y": 280,
        "wires": [
            [
                "d3e29a0d.c999c8"
            ]
        ]
    },
    {
        "id": "d3e29a0d.c999c8",
        "type": "influxdb in",
        "z": "4d33a3f7.9a95cc",
        "influxdb": "e5e7a933.556b18",
        "name": "",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "x": 410,
        "y": 440,
        "wires": [
            [
                "f8711215.507f2"
            ]
        ]
    },
    {
        "id": "f8711215.507f2",
        "type": "function",
        "z": "4d33a3f7.9a95cc",
        "name": "utilization",
        "func": "var LEAD_TIME_SECONDS = 900\nvar PRODUCTION_TIME_SECONDS = 900\n\n// create timestamp and sort\nvar timestamp_list = []\nvar tag = 1\nmsg.payload.forEach(\n    function(item)\n    {\n        timestamp_list.push(\n            {\n                tag: tag,\n                time: _convert_to_seconds(Date.parse(item.time)) - LEAD_TIME_SECONDS\n            },\n            {\n                tag: tag,\n                time: _convert_to_seconds(Date.parse(item.time)) + PRODUCTION_TIME_SECONDS\n            });\n\n        ++tag\n    }\n)\n\ntimestamp_list.sort(\n    function(a, b)\n    {\n        return a.time - b.time\n    }\n)\n\n// calculate utilization\nvar queue_ = []\nvar start_time = 0\nvar end_time = 0\nvar today_utilization_seconds = 0\n\ntimestamp_list.forEach(\n    function(item)\n    {\n        if (queue_.length == 0)\n        {\n            start_time = item.time\n            queue_.push(item)\n        }\n        else if (queue_[0].tag == item.tag)\n        {\n            end_time = item.time\n            queue_.shift()\n        }\n        else\n        {\n            queue_.push(item)\n        }\n\n        if (queue_.length == 0)\n        {\n            today_utilization_seconds += end_time - start_time\n        }\n    }\n)\n\nnode.log(today_utilization_seconds / 3600)\n\nmsg.payload = {\n    \"deviceId\": \"Q00U_utilization\",\n    \"channels\":[\n        {\n            \"channelId\": \"total_utilization_hours\",\n            \"value\":{\n                \"num\": Math.floor(today_utilization_seconds / 3600 * 100) / 100\n            }\n        }\n    ]\n}\n\nreturn msg\n\n\n// function\nfunction _convert_to_seconds(epoch_milliseconds)\n{\n    return Math.floor(epoch_milliseconds / 1000)\n}\n",
        "outputs": 1,
        "noerr": 0,
        "x": 620,
        "y": 440,
        "wires": [
            [
                "a6db94fb.f9de58"
            ]
        ]
    },
    {
        "id": "a6db94fb.f9de58",
        "type": "mqtt out",
        "z": "4d33a3f7.9a95cc",
        "name": "",
        "topic": "/in/devices/Q00U_utilization/readings",
        "qos": "1",
        "retain": "",
        "broker": "628fd767.22ae28",
        "x": 470,
        "y": 580,
        "wires": []
    }
]
